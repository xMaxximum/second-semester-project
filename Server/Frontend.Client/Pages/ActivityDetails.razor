@page "/activity/{Id:long}"
@using Shared.Models
@inject ActivityService ActivityService
@inject NavigationManager Navigation

<PageTitle>@(_details?.Activity?.Name ?? "Activity Details")</PageTitle>

<style>
    .background-grid {
        position: fixed;
        inset: 0;
        z-index: -1;
        opacity: 0.05;
    }
    .icon-header {
        display: flex;
        align-items: center;
    }
</style>

<!-- Background Grid SVG -->
<div class="background-grid">
    <svg viewBox="0 0 100 100" preserveAspectRatio="none" style="width: 100%; height: 100%;">
        <defs>
            <pattern id="grid" width="5" height="10" patternUnits="userSpaceOnUse">
                <path d="M 10 0 L 0 0 0 10" fill="none" stroke="blue" stroke-width="0.25"/>
            </pattern>
        </defs>
        <rect width="100" height="100" fill="url(#grid)"/>
    </svg>
</div>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16 mb-16">
    <div class="d-flex align-items-center justify-space-between mb-4" style="flex-wrap: wrap; gap: 10px;">
        <div class="d-flex align-items-center">
            <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.ArrowBack" 
                       Color="Color.Primary" OnClick="GoBack" Size="Size.Small">
                Back
            </MudButton>
        </div>
        <MudText Typo="Typo.h4" Class="text-center flex-grow-1" Style="font-weight: 600; min-width: 200px;">
            Activity Details
        </MudText>
        <div class="d-none d-sm-block" style="width: 80px;"></div> <!-- Spacer for centering on desktop -->
    </div>

    @if (_loading)
    {
        <div class="d-flex align-items-center justify-content-center pa-8">
            <MudProgressCircular Size="Size.Large" Indeterminate="true" />
            <MudText Typo="Typo.h6">Loading activity details...</MudText>
        </div>
    }
    else if (!string.IsNullOrEmpty(_error))
    {
        <MudAlert Severity="Severity.Error" Class="ma-4">
            <MudText><strong>Error:</strong> @_error</MudText>
        </MudAlert>
    }
    else if (_details?.Activity is null)
    {
        <MudAlert Severity="Severity.Info" Class="ma-4">
            <MudText>Activity not found. It may have been deleted or you don't have permission to view it.</MudText>
        </MudAlert>
    }
    else
    {
        <MudGrid Spacing="3">
            <!-- Activity Header Card -->
            <MudItem xs="12">
                <MudCard Elevation="3">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <div class="d-flex align-items-center justify-space-between" style="width: 100%;">
                                <div class="d-flex align-items-center flex-grow-1">
                                    <MudIcon Icon="@GetActivityIcon()" Class="mr-2" />
                                    @if (_editingTitle)
                                    {
                                        <div class="d-flex align-items-center gap-2 flex-grow-1">
                                            <MudTextField @bind-Value="_editedTitle" 
                                                         Variant="Variant.Outlined" 
                                                         Margin="Margin.Dense"
                                                         Style="flex-grow: 1; max-width: 400px;" />
                                            <MudIconButton Icon="@Icons.Material.Filled.Check" 
                                                          Color="Color.Success" 
                                                          Size="Size.Small"
                                                          OnClick="SaveTitleEdit" />
                                            <MudIconButton Icon="@Icons.Material.Filled.Close" 
                                                          Color="Color.Default" 
                                                          Size="Size.Small"
                                                          OnClick="CancelTitleEdit" />
                                        </div>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.h5" Style="margin: 0;">@_details.Activity.Name</MudText>
                                    }
                                </div>
                                <div class="d-flex align-items-center gap-2">
                                    @if (_details.Activity.Status == ActivityStatus.Completed)
                                    {
                                        <MudChip T="string" Color="Color.Success" Size="Size.Medium" 
                                                Icon="@Icons.Material.Filled.CheckCircle" Style="font-weight: bold; padding: 8px 16px;">
                                            ðŸŽ‰ Completed!
                                        </MudChip>
                                    }
                                    else
                                    {
                                        <MudChip T="string" Color="@GetStatusColor(_details.Activity.Status)" Size="Size.Medium">
                                            @_details.Activity.Status
                                        </MudChip>
                                    }
                                    @if (!_editingTitle)
                                    {
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                       Color="Color.Primary" 
                                                       Size="Size.Small"
                                                       OnClick="@(() => StartEditingTitle())"
                                                       Title="Edit Activity Name" />
                                    }
                                </div>
                            </div>
                            @if (!string.IsNullOrEmpty(_details.Activity.Description))
                            {
                                <MudText Typo="Typo.body1" Class="mt-2">@_details.Activity.Description</MudText>
                            }
                        </CardHeaderContent>
                    </MudCardHeader>
                </MudCard>
            </MudItem>

            <!-- Key Metrics Row -->
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="3" Class="pa-4" Style="align-items: center">
                    <div class="d-flex flex-column align-items-center gap-1">
                        <MudIcon Icon="@Icons.Material.Filled.Route" Size="Size.Large" Color="Color.Secondary" />
                        <MudText Typo="Typo.h6">@Math.Round((_details.Activity.Analytics?.TotalDistance ?? 0)/1000.0, 2) km</MudText>
                        <MudText Typo="Typo.caption" Color="Color.Secondary">Distance</MudText>
                    </div>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="3" Class="pa-4" Style="align-items: center">
                    <div class="d-flex flex-column align-items-center gap-1">
                        <MudIcon Icon="@Icons.Material.Filled.Speed" Size="Size.Large" Color="Color.Success" />
                        <MudText Typo="Typo.h6">@Math.Round(_details.Activity.Analytics?.AverageSpeed ?? 0, 1) km/h</MudText>
                        <MudText Typo="Typo.caption" Color="Color.Secondary">Avg Speed</MudText>
                    </div>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="3" Class="pa-4" Style="align-items: center">
                    <div class="d-flex flex-column align-items-center gap-1">
                        <MudIcon Icon="@Icons.Material.Filled.AccessTime" Size="Size.Large" Color="Color.Warning" />
                        <MudText Typo="Typo.h6">@FormatDuration(_details.Activity.Duration)</MudText>
                        <MudText Typo="Typo.caption" Color="Color.Secondary">Duration</MudText>
                    </div>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="3" Class="pa-4" Style="align-items: center">
                    <div class="d-flex flex-column align-items-center gap-1">
                        <MudIcon Icon="@Icons.Material.Filled.Thermostat" Size="Size.Large" Color="Color.Info" />
                        <MudText Typo="Typo.h6">@Math.Round(_details.Activity.Analytics?.AverageTemperature ?? 0, 1)Â°C</MudText>
                        <MudText Typo="Typo.caption" Color="Color.Secondary">Avg Temp</MudText>
                    </div>
                </MudCard>
            </MudItem>

            <!-- Activity Timeline -->
            <MudItem xs="12" md="6">
                <MudCard Elevation="3">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6" Class="icon-header">
                                <MudIcon Icon="@Icons.Material.Filled.Timeline" Class="mr-2" />
                                Timeline
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <div class="d-flex flex-column gap-3">
                            <div class="d-flex align-items-center gap-2">
                                <MudIcon Icon="@Icons.Material.Filled.PlayArrow" Color="Color.Success" />
                                <div>
                                    <MudText Typo="Typo.body2"><strong>Started</strong></MudText>
                                    <MudText Typo="Typo.caption">@_details.Activity.StartTime.ToString("MMM dd, yyyy HH:mm")</MudText>
                                </div>
                            </div>
                            
                            @if (_details.Activity.EndTime.HasValue)
                            {
                                <div class="d-flex align-items-center gap-2">
                                    <MudIcon Icon="@Icons.Material.Filled.Stop" Color="Color.Error" />
                                    <div>
                                        <MudText Typo="Typo.body2"><strong>Finished</strong></MudText>
                                        <MudText Typo="Typo.caption">@_details.Activity.EndTime.Value.ToString("MMM dd, yyyy HH:mm")</MudText>
                                    </div>
                                </div>
                            }
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Additional Metrics -->
            <MudItem xs="12" md="6">
                <MudCard Elevation="3">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="@Icons.Material.Filled.Analytics" Class="mr-2" />
                                Additional Metrics
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudStack Spacing="2">
                            <MudStack Row="true" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.body2">Max Speed:</MudText>
                                <MudText Typo="Typo.body2"><strong>@Math.Round(_details.Activity.Analytics?.MaxSpeed ?? 0, 1) km/h</strong></MudText>
                            </MudStack>
                            <MudStack Row="true" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.body2">Data Points:</MudText>
                                <MudText Typo="Typo.body2"><strong>@_details.SensorData.Count</strong></MudText>
                            </MudStack>
                            <MudStack Row="true" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.body2">Calories Burned:</MudText>
                                <MudText Typo="Typo.body2"><strong>@Math.Round(_details.Activity.Analytics?.CaloriesBurned ?? 0, 0) kcal</strong></MudText>
                            </MudStack>
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Sensor Data Table -->
            <MudItem xs="12">
                <MudCard Elevation="3">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="@Icons.Material.Filled.DataUsage" Class="mr-2" />
                                Sensor Data (@_details.SensorData.Count points)
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent Class="pa-0">
                        <MudTable Items="_details.SensorData" Dense="true" Hover="true" Striped="true" 
                                  FixedHeader="true" Height="400px">
                            <HeaderContent>
                                <MudTh><MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Small" Class="mr-1" />Time</MudTh>
                                <MudTh><MudIcon Icon="@Icons.Material.Filled.Speed" Size="Size.Small" Class="mr-1" />Speed</MudTh>
                                <MudTh><MudIcon Icon="@Icons.Material.Filled.Thermostat" Size="Size.Small" Class="mr-1" />Temperature</MudTh>
                                <MudTh><MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" Class="mr-1" />Latitude</MudTh>
                                <MudTh><MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" Class="mr-1" />Longitude</MudTh>
                                <MudTh><MudIcon Icon="@Icons.Material.Filled.TrendingUp" Size="Size.Small" Class="mr-1" />Elevation</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Time">
                                    <MudText Typo="Typo.caption">@context.Timestamp.ToString("HH:mm:ss")</MudText>
                                </MudTd>
                                <MudTd DataLabel="Speed">
                                    <MudText Typo="Typo.body2">@context.CurrentSpeed.ToString("F1") km/h</MudText>
                                </MudTd>
                                <MudTd DataLabel="Temperature">
                                    <MudText Typo="Typo.body2">@context.CurrentTemperature.ToString("F1")Â°C</MudText>
                                </MudTd>
                                <MudTd DataLabel="Latitude">
                                    <MudText Typo="Typo.caption">@context.Latitude.ToString("F6")</MudText>
                                </MudTd>
                                <MudTd DataLabel="Longitude">
                                    <MudText Typo="Typo.caption">@context.Longitude.ToString("F6")</MudText>
                                </MudTd>
                                <MudTd DataLabel="Elevation">
                                    <MudText Typo="Typo.body2">@context.ElevationGain.ToString("F0")m</MudText>
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    [Parameter]
    public long Id { get; set; }

    private ActivityDetailsResponse? _details;
    private bool _loading = true;
    private string? _error;
    private bool _editingTitle = false;
    private string _editedTitle = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        _loading = true; _error = null;
        _details = await ActivityService.GetActivityAsync(Id);
        if (_details is null || !_details.IsSuccess)
        {
            _error = _details?.Message ?? "Failed to load";
        }
        _loading = false;
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private string GetActivityIcon()
    {
        return _details?.Activity?.Status switch
        {
            ActivityStatus.InProgress => Icons.Material.Filled.DirectionsRun,
            ActivityStatus.Completed => Icons.Material.Filled.CheckCircle,
            ActivityStatus.Paused => Icons.Material.Filled.Pause,
            ActivityStatus.Cancelled => Icons.Material.Filled.Cancel,
            _ => Icons.Material.Filled.FitnessCenter
        };
    }

    private Color GetStatusColor(ActivityStatus status)
    {
        return status switch
        {
            ActivityStatus.InProgress => Color.Info,
            ActivityStatus.Completed => Color.Success,
            ActivityStatus.Paused => Color.Warning,
            ActivityStatus.Cancelled => Color.Error,
            _ => Color.Default
        };
    }

    private string FormatDuration(TimeSpan? duration)
    {
        if (!duration.HasValue) return "N/A";
        
        var d = duration.Value;
        if (d.TotalHours >= 1)
            return $"{(int)d.TotalHours}h {d.Minutes}m";
        if (d.TotalMinutes >= 1)
            return $"{(int)d.TotalMinutes}m {d.Seconds}s";
        return $"{d.Seconds}s";
    }

    private void StartEditingTitle()
    {
        _editingTitle = true;
        _editedTitle = _details?.Activity?.Name ?? "";
        StateHasChanged();
    }

    private async Task SaveTitleEdit()
    {
        if (_details?.Activity != null && !string.IsNullOrWhiteSpace(_editedTitle))
        {
            try
            {
                var updateRequest = new ActivityUpdateRequest 
                { 
                    Id = _details.Activity.Id,
                    Name = _editedTitle 
                };
                
                var result = await ActivityService.UpdateActivityAsync(_details.Activity.Id, updateRequest);
                if (result?.IsSuccess == true)
                {
                    _details.Activity.Name = _editedTitle;
                }
                _editingTitle = false;
                StateHasChanged();
            }
            catch
            {
                // Handle error - could show a snackbar or error message
                _editingTitle = false;
                StateHasChanged();
            }
        }
    }

    private void CancelTitleEdit()
    {
        _editingTitle = false;
        _editedTitle = string.Empty;
        StateHasChanged();
    }
}
