@page "/profile"
@rendermode InteractiveWebAssembly
@using Shared.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using Frontend.Client.Services
@inject AuthService AuthService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IDialogService DialogService
@attribute [Authorize]

<PageTitle>Profile Settings</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-16">
    <MudPaper Class="pa-6">
        <MudText Typo="Typo.h4" GutterBottom="true">Profile Settings</MudText>
        
        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" />
        }
        else if (profile != null)
        {
            <MudGrid>
                <!-- Profile Information Section -->
                <MudItem xs="12">
                    <MudPaper Class="pa-4 mb-4" Elevation="2">
                        <MudText Typo="Typo.h6" GutterBottom="true">
                            <MudIcon Icon="@Icons.Material.Filled.Person" Class="me-2" />
                            Profile Information
                        </MudText>
                        <EditForm Model="updateProfileRequest" OnValidSubmit="UpdateProfile">
                            <DataAnnotationsValidator />
                            <MudGrid>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="updateProfileRequest.UserName"
                                                  Label="Username"
                                                  Required="true"
                                                  For="@(() => updateProfileRequest.UserName)" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField Value="@profile.Email"
                                                  Label="Email"
                                                  ReadOnly="true"
                                                  HelperText="To change email, use the section below" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudButton ButtonType="ButtonType.Submit"
                                               Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               Disabled="isUpdatingProfile">
                                        @if (isUpdatingProfile)
                                        {
                                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                            <MudText Class="ms-2">Updating...</MudText>
                                        }
                                        else
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.Save" Class="me-2" />
                                            <MudText>Update Profile</MudText>
                                        }
                                    </MudButton>
                                </MudItem>
                            </MudGrid>
                        </EditForm>
                    </MudPaper>
                </MudItem>

                <!-- Change Email Section -->
                <MudItem xs="12">
                    <MudPaper Class="pa-4 mb-4" Elevation="2">
                        <MudText Typo="Typo.h6" GutterBottom="true">
                            <MudIcon Icon="@Icons.Material.Filled.Email" Class="me-2" />
                            Change Email
                        </MudText>
                        <EditForm Model="changeEmailRequest" OnValidSubmit="ChangeEmail">
                            <DataAnnotationsValidator />
                            <MudGrid>
                                <MudItem xs="12" sm="6">
                                    <MudTextField Value="@profile.Email"
                                                  Label="Current Email"
                                                  ReadOnly="true" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="changeEmailRequest.NewEmail"
                                                  Label="New Email"
                                                  Required="true"
                                                  For="@(() => changeEmailRequest.NewEmail)" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="changeEmailRequest.CurrentPassword"
                                                  Label="Current Password"
                                                  InputType="InputType.Password"
                                                  Required="true"
                                                  For="@(() => changeEmailRequest.CurrentPassword)" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudButton ButtonType="ButtonType.Submit"
                                               Variant="Variant.Filled"
                                               Color="Color.Secondary"
                                               Disabled="isChangingEmail">
                                        @if (isChangingEmail)
                                        {
                                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                            <MudText Class="ms-2">Changing...</MudText>
                                        }
                                        else
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.AlternateEmail" Class="me-2" />
                                            <MudText>Change Email</MudText>
                                        }
                                    </MudButton>
                                </MudItem>
                            </MudGrid>
                        </EditForm>
                    </MudPaper>
                </MudItem>

                <!-- Change Password Section -->
                <MudItem xs="12">
                    <MudPaper Class="pa-4 mb-4" Elevation="2">
                        <MudText Typo="Typo.h6" GutterBottom="true">
                            <MudIcon Icon="@Icons.Material.Filled.Lock" Class="me-2" />
                            Change Password
                        </MudText>
                        <EditForm Model="changePasswordRequest" OnValidSubmit="ChangePassword">
                            <DataAnnotationsValidator />
                            <MudGrid>
                                <MudItem xs="12" sm="4">
                                    <MudTextField @bind-Value="changePasswordRequest.CurrentPassword"
                                                  Label="Current Password"
                                                  InputType="InputType.Password"
                                                  Required="true"
                                                  For="@(() => changePasswordRequest.CurrentPassword)" />
                                </MudItem>
                                <MudItem xs="12" sm="4">
                                    <MudTextField @bind-Value="changePasswordRequest.NewPassword"
                                                  Label="New Password"
                                                  InputType="InputType.Password"
                                                  Required="true"
                                                  For="@(() => changePasswordRequest.NewPassword)" />
                                </MudItem>
                                <MudItem xs="12" sm="4">
                                    <MudTextField @bind-Value="changePasswordRequest.ConfirmNewPassword"
                                                  Label="Confirm New Password"
                                                  InputType="InputType.Password"
                                                  Required="true"
                                                  For="@(() => changePasswordRequest.ConfirmNewPassword)" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudButton ButtonType="ButtonType.Submit"
                                               Variant="Variant.Filled"
                                               Color="Color.Info"
                                               Disabled="isChangingPassword">
                                        @if (isChangingPassword)
                                        {
                                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                            <MudText Class="ms-2">Changing...</MudText>
                                        }
                                        else
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.VpnKey" Class="me-2" />
                                            <MudText>Change Password</MudText>
                                        }
                                    </MudButton>
                                </MudItem>
                            </MudGrid>
                        </EditForm>
                    </MudPaper>
                </MudItem>

                <!-- Delete Account Section -->
                <MudItem xs="12">
                    <MudPaper Class="pa-4" Elevation="2" Style="border: 2px solid var(--mud-palette-error);">
                        <MudText Typo="Typo.h6" GutterBottom="true" Color="Color.Error">
                            <MudIcon Icon="@Icons.Material.Filled.Warning" Class="me-2" />
                            Danger Zone
                        </MudText>
                        <MudAlert Severity="Severity.Warning" Class="mb-4">
                            <strong>Warning:</strong> This action cannot be undone. All your data will be permanently deleted.
                        </MudAlert>
                        
                        <EditForm Model="deleteAccountRequest" OnValidSubmit="ShowDeleteConfirmation">
                            <DataAnnotationsValidator />
                            <MudGrid>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="deleteAccountRequest.CurrentPassword"
                                                  Label="Current Password"
                                                  InputType="InputType.Password"
                                                  Required="true"
                                                  For="@(() => deleteAccountRequest.CurrentPassword)"
                                                  HelperText="Enter your password to confirm account deletion" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudButton ButtonType="ButtonType.Submit"
                                               Variant="Variant.Filled"
                                               Color="Color.Error"
                                               Disabled="isDeletingAccount">
                                        @if (isDeletingAccount)
                                        {
                                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                            <MudText Class="ms-2">Deleting...</MudText>
                                        }
                                        else
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Class="me-2" />
                                            <MudText>Delete My Account</MudText>
                                        }
                                    </MudButton>
                                </MudItem>
                            </MudGrid>
                        </EditForm>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        }
    </MudPaper>
</MudContainer>

@code {
    private UserProfile? profile;
    private bool isLoading = true;
    private bool isUpdatingProfile = false;
    private bool isChangingEmail = false;
    private bool isChangingPassword = false;
    private bool isDeletingAccount = false;

    private UpdateProfileRequest updateProfileRequest = new();
    private ChangeEmailRequest changeEmailRequest = new();
    private ChangePasswordRequest changePasswordRequest = new();
    private DeleteAccountRequest deleteAccountRequest = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProfile();
    }

    private async Task LoadProfile()
    {
        isLoading = true;
        var response = await AuthService.GetProfileAsync();
        
        if (response.IsSuccess && response.Profile != null)
        {
            profile = response.Profile;
            updateProfileRequest.UserName = profile.UserName;
        }
        else
        {
            Snackbar.Add(response.Message, Severity.Error);
        }
        
        isLoading = false;
    }

    private async Task UpdateProfile()
    {
        isUpdatingProfile = true;
        var response = await AuthService.UpdateProfileAsync(updateProfileRequest);
        
        if (response.IsSuccess)
        {
            Snackbar.Add("Profile updated successfully!", Severity.Success);
            if (response.Profile != null)
            {
                profile = response.Profile;
            }
            
            // Refresh the page to update the display name in the UI
            await Task.Delay(1500); // Small delay to let user see the success message
            Navigation.NavigateTo(Navigation.Uri, true); // Force reload
        }
        else
        {
            var errorMessage = response.Errors.Any() ? string.Join(", ", response.Errors) : response.Message;
            Snackbar.Add(errorMessage, Severity.Error);
        }
        
        isUpdatingProfile = false;
    }

    private async Task ChangeEmail()
    {
        isChangingEmail = true;
        var response = await AuthService.ChangeEmailAsync(changeEmailRequest);
        
        if (response.IsSuccess)
        {
            Snackbar.Add("Email changed successfully!", Severity.Success);
            changeEmailRequest = new(); // Clear form
            await LoadProfile(); // Reload profile to show new email
        }
        else
        {
            var errorMessage = response.Errors.Any() ? string.Join(", ", response.Errors) : response.Message;
            Snackbar.Add(errorMessage, Severity.Error);
        }
        
        isChangingEmail = false;
    }

    private async Task ChangePassword()
    {
        isChangingPassword = true;
        var response = await AuthService.ChangePasswordAsync(changePasswordRequest);
        
        if (response.IsSuccess)
        {
            Snackbar.Add("Password changed successfully!", Severity.Success);
            changePasswordRequest = new(); // Clear form
        }
        else
        {
            var errorMessage = response.Errors.Any() ? string.Join(", ", response.Errors) : response.Message;
            Snackbar.Add(errorMessage, Severity.Error);
        }
        
        isChangingPassword = false;
    }

    private async Task ShowDeleteConfirmation()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Delete Account",
            "Are you absolutely sure you want to delete your account? This action cannot be undone and all your data will be permanently deleted.",
            yesText: "Yes, Delete My Account",
            cancelText: "Cancel");

        if (result == true)
        {
            await DeleteAccount();
        }
    }

    private async Task DeleteAccount()
    {
        isDeletingAccount = true;
        var response = await AuthService.DeleteAccountAsync(deleteAccountRequest);
        
        if (response.IsSuccess)
        {
            Snackbar.Add("Account deleted successfully.", Severity.Success);
            // Clear auth state and redirect to home
            await AuthService.LogoutAsync();
            Navigation.NavigateTo("/", true);
        }
        else
        {
            var errorMessage = response.Errors.Any() ? string.Join(", ", response.Errors) : response.Message;
            Snackbar.Add(errorMessage, Severity.Error);
        }
        
        isDeletingAccount = false;
    }
}
