@page "/carbscounter"

<div class="page-container">
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
        <MudPaper Class="pa-4 mb-4" Style="display: grid; justify-content: center" Elevation="3">
            <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-2 icon-header">
                <MudIcon Icon="@Icons.Material.Filled.DirectionsBike" Class="me-2" Color="Color.Primary" />
                Cycling Carbs Calculator
            </MudText>
            <MudText Typo="Typo.body1" Align="Align.Center" Class="mb-2 mud-text-secondary">
                Plan your nutrition strategy for optimal cycling performance
            </MudText>
        </MudPaper>

        <MudGrid>
            <!-- Input Section -->
            <MudItem xs="12" md="6">
                <MudPaper Class="pa-4 mb-4" Elevation="3">
                    <MudText Typo="Typo.h5" Class="mb-4 icon-header">
                        <MudIcon Icon="@Icons.Material.Filled.Settings" Class="me-2" />
                        Ride Configuration
                    </MudText>

                    <MudTabs Elevation="0" Rounded="true" Centered="true" @bind-ActivePanelIndex="_activeTab">
                        <MudTabPanel Text="Distance">
                            <MudStack Spacing="3" Class="mt-4">
                                <MudNumericField @bind-Value="_rideDistance" 
                                               Label="Distance (km)" 
                                               Min="1" Max="500"
                                               Adornment="Adornment.End" 
                                               AdornmentText="km"
                                               Variant="Variant.Outlined" />
                                <MudNumericField @bind-Value="_averageSpeed" 
                                               Label="Expected Average Speed" 
                                               Min="10" Max="60"
                                               Adornment="Adornment.End" 
                                               AdornmentText="km/h"
                                               Variant="Variant.Outlined" />
                                <MudAlert Severity="Severity.Info" Class="mt-2">
                                    Estimated ride duration: @CalculateRideDuration()
                                </MudAlert>
                            </MudStack>
                        </MudTabPanel>
                        <MudTabPanel Text="Time">
                            <MudStack Spacing="3" Class="mt-4">
                                <MudTextField @bind-Value="_rideDurationInput" 
                                            Label="Ride Duration (HH:MM)" 
                                            Placeholder="2:30"
                                            Variant="Variant.Outlined"
                                            HelperText="Format: Hours:Minutes (e.g., 2:30 for 2.5 hours)" />
                                <MudNumericField @bind-Value="_intensityFactor" 
                                               Label="Intensity Factor" 
                                               Min="0.5" Max="1.0" Step="0.05"
                                               Adornment="Adornment.End" 
                                               AdornmentText="IF"
                                               Variant="Variant.Outlined"
                                               HelperText="0.5 = Easy, 0.7 = Moderate, 0.85+ = Hard" />
                            </MudStack>
                        </MudTabPanel>
                    </MudTabs>

                    <MudDivider Class="my-4" />

                    <MudText Typo="Typo.h6" Class="mb-3">Personal Settings</MudText>
                    <MudStack Spacing="3">
                        <MudNumericField @bind-Value="_bodyWeight" 
                                       Label="Body Weight" 
                                       Min="40" Max="150"
                                       Adornment="Adornment.End" 
                                       AdornmentText="kg"
                                       Variant="Variant.Outlined" />
                        <MudSelect @bind-Value="_fitnessLevel" Label="Fitness Level" Variant="Variant.Outlined">
                            <MudSelectItem Value="@FitnessLevel.Beginner">Beginner</MudSelectItem>
                            <MudSelectItem Value="@FitnessLevel.Intermediate">Intermediate</MudSelectItem>
                            <MudSelectItem Value="@FitnessLevel.Advanced">Advanced</MudSelectItem>
                            <MudSelectItem Value="@FitnessLevel.Elite">Elite</MudSelectItem>
                        </MudSelect>
                    </MudStack>

                    <MudButton Variant="Variant.Filled" 
                             Color="Color.Primary" 
                             StartIcon="@Icons.Material.Filled.Calculate"
                             FullWidth="true" 
                             Class="mt-4"
                             OnClick="CalculateNutrition"
                             Disabled="@(!IsInputValid())">
                        Calculate Nutrition Plan
                    </MudButton>
                </MudPaper>

                <!-- Nutrition Preferences -->
                <MudPaper Class="pa-4" Elevation="3">
                    <MudText Typo="Typo.h6" Class="mb-3 icon-header">
                        <MudIcon Icon="@Icons.Material.Filled.Tune" Class="me-2" />
                        Nutrition Preferences
                    </MudText>
                    
                    <MudStack Spacing="2">
                        <MudSwitch T="bool" @bind-Value="_preferences.AllowGels" Color="Color.Primary" Label="Energy Gels" />
                        <MudSwitch T="bool" @bind-Value="_preferences.AllowSportsDrinks" Color="Color.Primary" Label="Sports Drinks" />
                        <MudSwitch T="bool" @bind-Value="_preferences.AllowBananas" Color="Color.Primary" Label="Bananas" />
                        <MudSwitch T="bool" @bind-Value="_preferences.AllowEnergyBars" Color="Color.Primary" Label="Energy Bars" />
                        <MudSwitch T="bool" @bind-Value="_preferences.AllowDates" Color="Color.Primary" Label="Dates" />
                        <MudSwitch T="bool" @bind-Value="_preferences.PreferNaturalFoods" Color="Color.Primary" Label="Prefer Natural Foods" />
                    </MudStack>

                    <MudDivider Class="my-3" />
                    
                    <MudText Typo="Typo.subtitle2" Class="mb-2">Hydration Preferences</MudText>
                    <MudStack Spacing="2">
                        <MudSwitch T="bool" @bind-Value="_preferences.IncludeElectrolytes" Color="Color.Primary" Label="Electrolyte Drinks" />
                        <MudNumericField @bind-Value="_preferences.FluidIntensity" 
                                       Label="Hydration Intensity" 
                                       Min="0.5" Max="2.0" Step="0.1"
                                       Variant="Variant.Outlined"
                                       HelperText="1.0 = Normal, 1.5 = Hot weather, 0.7 = Cool weather" />
                    </MudStack>
                </MudPaper>
            </MudItem>

            <!-- Results Section -->
            <MudItem xs="12" md="6">
                @if (_nutritionPlan != null)
                {
                    <!-- Summary Cards -->
                    <MudGrid Class="mb-4">
                        <MudItem xs="12" sm="4">
                            <MudPaper Class="pa-4 text-center primary-gradient summary-card" Elevation="3">
                                <MudText Typo="Typo.h4" Class="summary-value">@_nutritionPlan.TotalCarbs.ToString("F0")</MudText>
                                <MudText Typo="Typo.body2" Class="summary-label">g Carbs</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" sm="4">
                            <MudPaper Class="pa-4 text-center secondary-gradient summary-card" Elevation="3">
                                <MudText Typo="Typo.h4" Class="summary-value">@_nutritionPlan.TotalFluids.ToString("F1")</MudText>
                                <MudText Typo="Typo.body2" Class="summary-label">L Fluids</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" sm="4">
                            <MudPaper Class="pa-4 text-center success-gradient summary-card" Elevation="3">
                                <MudText Typo="Typo.h4" Class="summary-value">@_nutritionPlan.TotalCalories.ToString("F0")</MudText>
                                <MudText Typo="Typo.body2" Class="summary-label">kcal</MudText>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>

                    <!-- Timeline -->
                    <MudPaper Class="pa-4 mb-4" Elevation="3">
                        <MudText Typo="Typo.h6" Class="mb-3 icon-header">
                            <MudIcon Icon="@Icons.Material.Filled.Schedule" Class="me-2" />
                            Nutrition Timeline
                        </MudText>
                        
                        <MudTimeline TimelineOrientation="TimelineOrientation.Vertical" TimelinePosition="TimelinePosition.Start">
                            @foreach (var item in _nutritionPlan.Timeline)
                            {
                                <MudTimelineItem Color="@GetTimelineColor(item.Type)" Size="Size.Small">
                                    <ItemContent>
                                        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-2">
                                            <div>
                                                <MudText Typo="Typo.subtitle1" Class="font-weight-bold">
                                                    @item.Time (@item.Description)
                                                </MudText>
                                                <MudText Typo="Typo.body2" Class="mud-text-secondary">
                                                    @item.Instructions
                                                </MudText>
                                            </div>
                                            <MudChip T="string" Color="@GetTimelineColor(item.Type)" Size="Size.Small">
                                                @GetNutrientInfo(item)
                                            </MudChip>
                                        </MudStack>
                                    </ItemContent>
                                </MudTimelineItem>
                            }
                        </MudTimeline>
                    </MudPaper>

                    <!-- Shopping List -->
                    <MudPaper Class="pa-4" Elevation="3">
                        <MudText Typo="Typo.h6" Class="mb-3 icon-header">
                            <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Class="me-2" />
                            Shopping List
                        </MudText>
                        
                        <MudGrid>
                            @foreach (var item in _nutritionPlan.ShoppingList)
                            {
                                <MudItem xs="12" sm="6" md="4">
                                    <MudCard Class="shopping-card" Elevation="3">
                                        <MudCardContent Class="pa-3">
                                            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                                <div>
                                                    <MudText Typo="Typo.subtitle2" Class="font-weight-medium">@item.Item</MudText>
                                                    <MudText Typo="Typo.caption" Color="Color.Secondary">@item.Amount</MudText>
                                                </div>
                                                <MudIcon Icon="@GetItemIcon(item.Item)" Color="Color.Primary" Size="Size.Medium" />
                                            </MudStack>
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudPaper>
                }
                else
                {
                    <MudPaper Class="pa-6 text-center" Elevation="1" Style="border: 2px dashed #ccc;">
                        <MudIcon Icon="@Icons.Material.Filled.Calculate" Size="Size.Large" Color="Color.Secondary" Class="mb-3" />
                        <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mb-2">Ready to Calculate</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            Fill in your ride details and click "Calculate Nutrition Plan" to get personalized recommendations
                        </MudText>
                    </MudPaper>
                }
            </MudItem>
        </MudGrid>
    </MudContainer>
</div>

@code {
    private int _activeTab;
    private double _rideDistance = 50;
    private double _averageSpeed = 25;
    private string _rideDurationInput = "2:00";
    private double _intensityFactor = 0.7;
    private double _bodyWeight = 70;
    private FitnessLevel _fitnessLevel = FitnessLevel.Intermediate;
    
    private NutritionPreferences _preferences = new();
    private NutritionPlan? _nutritionPlan;

    private void CalculateNutrition()
    {
        var duration = _activeTab == 0 ? CalculateRideDurationTimeSpan() : ParseDuration(_rideDurationInput);
        if (duration == TimeSpan.Zero) return;

        // Ensure at least some basic options are available
        if (!_preferences.AllowGels && !_preferences.AllowSportsDrinks && 
            !_preferences.AllowBananas && !_preferences.AllowEnergyBars && 
            !_preferences.AllowDates)
        {
            _preferences.AllowSportsDrinks = true; // Fallback to sports drinks
        }

        var calculator = new CyclingNutritionCalculator();
        var rideConfig = new RideConfiguration
        {
            Duration = duration,
            Distance = _activeTab == 0 ? _rideDistance : CalculateDistanceFromTime(duration),
            IntensityFactor = _intensityFactor,
            BodyWeight = _bodyWeight,
            FitnessLevel = _fitnessLevel
        };

        _nutritionPlan = calculator.CalculateNutritionPlan(rideConfig, _preferences);
    }

    private bool IsInputValid()
    {
        if (_activeTab == 0)
        {
            return _rideDistance > 0 && _averageSpeed > 0 && _bodyWeight > 0;
        }
        else
        {
            return !string.IsNullOrEmpty(_rideDurationInput) && 
                   ParseDuration(_rideDurationInput) != TimeSpan.Zero && 
                   _bodyWeight > 0;
        }
    }

    private string CalculateRideDuration()
    {
        if (_rideDistance <= 0 || _averageSpeed <= 0) return "0:00";
        var hours = _rideDistance / _averageSpeed;
        var timeSpan = TimeSpan.FromHours(hours);
        return $"{(int)timeSpan.TotalHours}:{timeSpan.Minutes:D2}";
    }

    private TimeSpan CalculateRideDurationTimeSpan()
    {
        if (_rideDistance <= 0 || _averageSpeed <= 0) return TimeSpan.Zero;
        return TimeSpan.FromHours(_rideDistance / _averageSpeed);
    }

    private double CalculateDistanceFromTime(TimeSpan duration)
    {
        return duration.TotalHours * 25; // Assume 25 km/h average
    }

    private TimeSpan ParseDuration(string input)
    {
        if (string.IsNullOrEmpty(input)) return TimeSpan.Zero;
        
        var parts = input.Split(':');
        if (parts.Length != 2) return TimeSpan.Zero;
        
        if (int.TryParse(parts[0], out var hours) && int.TryParse(parts[1], out var minutes))
        {
            return new TimeSpan(hours, minutes, 0);
        }
        
        return TimeSpan.Zero;
    }

    private Color GetTimelineColor(NutritionItemType type)
    {
        return type switch
        {
            NutritionItemType.PreRide => Color.Info,
            NutritionItemType.Carbs => Color.Primary,
            NutritionItemType.Hydration => Color.Secondary,
            NutritionItemType.PostRide => Color.Success,
            _ => Color.Default
        };
    }

    private string GetNutrientInfo(NutritionTimelineItem item)
    {
        return item.Type switch
        {
            NutritionItemType.Carbs => $"{(item.Carbs % 1 == 0 ? item.Carbs.ToString("F0") : item.Carbs.ToString("F2"))}g",
            NutritionItemType.Hydration => $"{item.Fluids:F1}L",
            _ => item.Calories > 0 ? $"{(item.Calories % 1 == 0 ? item.Calories.ToString("F0") : item.Calories.ToString("F2"))}kcal" : "Info"
        };
    }

    private string GetItemIcon(string item)
    {
        var lowerItem = item.ToLower();
        
        if (lowerItem.Contains("gel")) return Icons.Material.Filled.Science;
        if (lowerItem.Contains("drink") || lowerItem.Contains("sports")) return Icons.Material.Filled.LocalDrink;
        if (lowerItem.Contains("banana")) return Icons.Custom.Uncategorized.FoodApple;
        if (lowerItem.Contains("bar")) return Icons.Material.Filled.Rectangle;
        if (lowerItem.Contains("date")) return Icons.Custom.Uncategorized.FoodApple;
        if (lowerItem.Contains("water")) return Icons.Material.Filled.WaterDrop;
        if (lowerItem.Contains("honey")) return Icons.Custom.Uncategorized.FoodApple;
        if (lowerItem.Contains("electrolyte") || lowerItem.Contains("tablet")) return Icons.Material.Filled.MedicalServices;
        
        return Icons.Material.Filled.Fastfood;
    }

    // Models and Calculator Classes
    public class NutritionPreferences
    {
        public bool AllowGels { get; set; } = true;
        public bool AllowSportsDrinks { get; set; } = true;
        public bool AllowBananas { get; set; }
        public bool AllowEnergyBars { get; set; } = true;
        public bool AllowDates { get; set; }
        public bool PreferNaturalFoods { get; set; }
        public bool IncludeElectrolytes { get; set; }
        public double FluidIntensity { get; set; } = 1.0;
    }

    public class RideConfiguration
    {
        public TimeSpan Duration { get; set; }
        public double Distance { get; set; }
        public double IntensityFactor { get; set; }
        public double BodyWeight { get; set; }
        public FitnessLevel FitnessLevel { get; set; }
    }

    public class NutritionPlan
    {
        public double TotalCarbs { get; set; }
        public double TotalFluids { get; set; }
        public double TotalCalories { get; set; }
        public List<NutritionTimelineItem> Timeline { get; set; } = new();
        public List<ShoppingListItem> ShoppingList { get; set; } = new();
    }

    public class NutritionTimelineItem
    {
        public string Time { get; set; } = "";
        public string Description { get; set; } = "";
        public string Instructions { get; set; } = "";
        public NutritionItemType Type { get; set; }
        public double Carbs { get; set; }
        public double Fluids { get; set; }
        public double Calories { get; set; }
        public int SortOrder { get; set; }
    }

    public class ShoppingListItem
    {
        public string Item { get; set; } = "";
        public string Amount { get; set; } = "";
    }

    public enum NutritionItemType
    {
        PreRide,
        Carbs,
        Hydration,
        PostRide
    }

    public enum FitnessLevel
    {
        Beginner,
        Intermediate,
        Advanced,
        Elite
    }

    // Nutrition Calculator
    public class CyclingNutritionCalculator
    {
        public NutritionPlan CalculateNutritionPlan(RideConfiguration config, NutritionPreferences preferences)
        {
            var plan = new NutritionPlan();
            
            // Calculate base requirements
            var carbsPerHour = CalculateCarbsPerHour(config);
            var fluidsPerHour = CalculateFluidsPerHour(config, preferences);
            
            plan.TotalCarbs = carbsPerHour * config.Duration.TotalHours;
            plan.TotalFluids = fluidsPerHour * config.Duration.TotalHours;
            plan.TotalCalories = plan.TotalCarbs * 4; // 4 kcal per gram of carbs
            
            // Generate timeline
            GenerateTimeline(plan, config, preferences, carbsPerHour, fluidsPerHour);
            
            // Generate shopping list
            GenerateShoppingList(plan, config, preferences);
            
            return plan;
        }

        private double CalculateCarbsPerHour(RideConfiguration config)
        {
            var baseCarbs = config.FitnessLevel switch
            {
                FitnessLevel.Beginner => 30.0,
                FitnessLevel.Intermediate => 45.0,
                FitnessLevel.Advanced => 60.0,
                FitnessLevel.Elite => 80.0,
                _ => 45.0
            };

            // Adjust for intensity
            baseCarbs *= config.IntensityFactor;
            
            // Adjust for body weight
            baseCarbs *= (config.BodyWeight / 70.0);
            
            return Math.Max(20, Math.Min(90, baseCarbs));
        }

        private double CalculateFluidsPerHour(RideConfiguration config, NutritionPreferences preferences)
        {
            var baseFluid = 0.5; // liters per hour
            
            // Adjust for intensity and body weight
            baseFluid *= config.IntensityFactor;
            baseFluid *= (config.BodyWeight / 70.0);
            baseFluid *= preferences.FluidIntensity;
            
            return Math.Max(0.3, Math.Min(1.2, baseFluid));
        }

        private void GenerateTimeline(NutritionPlan plan, RideConfiguration config, NutritionPreferences preferences, double carbsPerHour, double fluidsPerHour)
        {
            var timeline = new List<NutritionTimelineItem>();
            
            // Pre-ride (2-3 hours before)
            timeline.Add(new NutritionTimelineItem
            {
                Time = "2-3h before",
                Description = "Pre-ride meal",
                Instructions = "Eat a carb-rich meal with some protein. Avoid high fiber or fatty foods.",
                Type = NutritionItemType.PreRide,
                Carbs = 100,
                Calories = 400,
                SortOrder = -3
            });

            // Pre-ride hydration
            timeline.Add(new NutritionTimelineItem
            {
                Time = "2h before",
                Description = "Initial hydration",
                Instructions = "Start hydrating. Drink slowly and steadily.",
                Type = NutritionItemType.Hydration,
                Fluids = 0.5,
                SortOrder = -2
            });

            // Start of ride
            timeline.Add(new NutritionTimelineItem
            {
                Time = "0:00 (Start)",
                Description = "Begin ride",
                Instructions = "Start with well-hydrated state. Have water bottles ready.",
                Type = NutritionItemType.PreRide,
                SortOrder = 0
            });

            // During ride - real-life cadence: carbs every 45 min, hydration every 20 min
            {
                var rideDuration = config.Duration;
                var foodBuffer = TimeSpan.FromMinutes(15); // last food at least 15 min before finish

                // Carb events at 00:45, 01:30, 02:15, ... but not within last 15 minutes
                var carbTimes = new List<TimeSpan>();
                var carbStep = TimeSpan.FromMinutes(45);
                for (var t = carbStep; t <= rideDuration - foodBuffer; t += carbStep)
                {
                    carbTimes.Add(t);
                }

                // Hydration events at 00:20, 00:40, 01:00, 01:20, ... up to ride end
                var drinkTimes = new List<TimeSpan>();
                var drinkStep = TimeSpan.FromMinutes(20);
                for (var d = drinkStep; d <= rideDuration; d += drinkStep)
                {
                    drinkTimes.Add(d);
                }

                // Distribute totals evenly across events so timeline sums match targets
                var totalCarbs = carbsPerHour * rideDuration.TotalHours;
                var totalFluids = fluidsPerHour * rideDuration.TotalHours;

                var carbsPerEvent = carbTimes.Count > 0 ? totalCarbs / carbTimes.Count : 0.0;
                var fluidsPerEvent = drinkTimes.Count > 0 ? totalFluids / drinkTimes.Count : 0.0;

                // Add carb events
                for (int i = 0; i < carbTimes.Count; i++)
                {
                    var timePoint = carbTimes[i];
                    var carbSource = GetCarbSource(preferences, i + 1);
                    timeline.Add(new NutritionTimelineItem
                    {
                        Time = $"{timePoint.Hours}:{timePoint.Minutes:D2}",
                        Description = carbSource.Name,
                        Instructions = $"{carbSource.Instructions} Target ~{carbsPerEvent:F0}g at this stop.",
                        Type = NutritionItemType.Carbs,
                        Carbs = carbsPerEvent,
                        Calories = carbsPerEvent * 4,
                        SortOrder = (int)timePoint.TotalMinutes
                    });
                }

                // Add hydration events
                for (int i = 0; i < drinkTimes.Count; i++)
                {
                    var timePoint = drinkTimes[i];
                    var fluidSource = GetFluidSource(preferences);
                    timeline.Add(new NutritionTimelineItem
                    {
                        Time = $"{timePoint.Hours}:{timePoint.Minutes:D2}",
                        Description = fluidSource.Name,
                        Instructions = $"{fluidSource.Instructions} Aim ~{fluidsPerEvent:F2}L at this mark.",
                        Type = NutritionItemType.Hydration,
                        Fluids = fluidsPerEvent,
                        SortOrder = (int)timePoint.TotalMinutes + 1 // ensure hydration after carbs if on same minute
                    });
                }
            }

            // Post-ride
            timeline.Add(new NutritionTimelineItem
            {
                Time = "Within 30min",
                Description = "Recovery nutrition",
                Instructions = "Consume carbs and protein in 3:1 ratio for optimal recovery.",
                Type = NutritionItemType.PostRide,
                Carbs = 50,
                Calories = 250,
                SortOrder = 1000
            });

            plan.Timeline = timeline.OrderBy(t => t.SortOrder).ToList();
        }

        private void GenerateShoppingList(NutritionPlan plan, RideConfiguration config, NutritionPreferences preferences)
        {
            var shoppingList = new List<ShoppingListItem>();
            var totalHours = config.Duration.TotalHours;
            var totalCarbsNeeded = plan.TotalCarbs;
            
            // Define carb content per item (grams)
            var carbValues = new Dictionary<string, double>
            {
                ["gel"] = 25,        // Energy gel: ~25g carbs
                ["banana"] = 27,     // 1 medium banana: ~27g carbs  
                ["bar"] = 30,        // Energy bar: ~30g carbs
                ["dates"] = 18,      // 3 dates: ~18g carbs
                ["sportsDrink"] = 30 // Per 500ml: ~30g carbs (was 15g per 250ml)
            };

            // Priority system: determine what user actually wants
            var prioritizedSources = new List<string>();
            
            if (preferences.PreferNaturalFoods)
            {
                // Natural foods first
                if (preferences.AllowBananas) prioritizedSources.Add("banana");
                if (preferences.AllowDates) prioritizedSources.Add("dates");
                // Only add processed if no natural options
                if (!prioritizedSources.Any())
                {
                    if (preferences.AllowSportsDrinks) prioritizedSources.Add("sportsDrink");
                    if (preferences.AllowGels) prioritizedSources.Add("gel");
                    if (preferences.AllowEnergyBars) prioritizedSources.Add("bar");
                }
            }
            else
            {
                // Balanced approach - mix of different sources for variety
                if (preferences.AllowGels) prioritizedSources.Add("gel");
                if (preferences.AllowBananas) prioritizedSources.Add("banana");
                if (preferences.AllowEnergyBars) prioritizedSources.Add("bar");
                if (preferences.AllowDates) prioritizedSources.Add("dates");
                if (preferences.AllowSportsDrinks) prioritizedSources.Add("sportsDrink");
            }

            // Fallback if nothing selected
            if (!prioritizedSources.Any())
            {
                prioritizedSources.Add("sportsDrink");
            }

            // Smart distribution: fill needs efficiently
            var carbsRemaining = totalCarbsNeeded;
            var sourceIndex = 0;
            
            while (carbsRemaining > 10 && sourceIndex < prioritizedSources.Count * 3) // max 3 rounds
            {
                var source = prioritizedSources[sourceIndex % prioritizedSources.Count];
                var carbsPerItem = carbValues[source];
                
                // Calculate how many we need of this item
                var desiredCarbsFromThisSource = Math.Min(carbsRemaining, carbsPerItem * 2); // max 2 units per round
                var quantity = Math.Max(1, Math.Ceiling(desiredCarbsFromThisSource / carbsPerItem));
                
                // Add to shopping list
                var existingItem = shoppingList.FirstOrDefault(item => 
                    (source == "sportsDrink" && item.Item.ToLower().Contains("sports")) ||
                    (source != "sportsDrink" && item.Item.ToLower().Contains(source)));
                
                if (existingItem != null)
                {
                    // Update existing quantity - parse carefully to handle different formats
                    var amountParts = existingItem.Amount.Split(' ');
                    if (amountParts.Length > 0 && double.TryParse(amountParts[0], out var currentQty))
                    {
                        var newQty = currentQty + quantity;
                        existingItem.Amount = source == "sportsDrink" 
                            ? $"{newQty:F1}L" 
                            : source == "dates" 
                                ? $"{(int)(newQty * 3)} pieces" 
                                : $"{(int)newQty} pieces";
                    }
                }
                else
                {
                    // Add new item
                    switch (source)
                    {
                        case "gel":
                            shoppingList.Add(new ShoppingListItem { Item = "Energy Gels", Amount = $"{quantity} pieces" });
                            break;
                        case "banana":
                            shoppingList.Add(new ShoppingListItem { Item = preferences.PreferNaturalFoods ? "🍌 Organic Bananas" : "Bananas", Amount = $"{quantity} pieces" });
                            break;
                        case "bar":
                            shoppingList.Add(new ShoppingListItem { Item = "Energy Bars", Amount = $"{quantity} pieces" });
                            break;
                        case "dates":
                            var dateServings = quantity * 3; // 3 dates per serving
                            shoppingList.Add(new ShoppingListItem { Item = preferences.PreferNaturalFoods ? "🌴 Medjool Dates" : "Dates", Amount = $"{dateServings} pieces" });
                            break;
                        case "sportsDrink":
                            var drinkVolume = quantity * 0.5; // 500ml per serving for better volume
                            shoppingList.Add(new ShoppingListItem { Item = "Sports Drink", Amount = $"{drinkVolume:F1}L" });
                            break;
                    }
                }
                
                carbsRemaining -= quantity * carbsPerItem;
                sourceIndex++;
            }

            // Sports drink volume based on hydration cadence (every 20 min ~ 0.1L per sip)
            if (preferences.AllowSportsDrinks)
            {
                var drinkEvents = Math.Floor(config.Duration.TotalMinutes / 20.0);
                var sipSizeL = 0.1; // 100 ml per sip
                var baseVolumeBySips = Math.Min(plan.TotalFluids, drinkEvents * sipSizeL);
                // Ensure at least 15% of carbs can come from sports drink (30g per 500ml => 60g/L)
                var minVolumeByCarbShare = totalCarbsNeeded * 0.15 / 60.0; // liters
                var computedSportsDrinkL = Math.Max(baseVolumeBySips, minVolumeByCarbShare);
                var sportsDrinkL = Math.Round(computedSportsDrinkL, 1, MidpointRounding.AwayFromZero);

                if (sportsDrinkL > 0)
                {
                    var existing = shoppingList.FirstOrDefault(s => s.Item.Contains("Sports Drink"));
                    if (existing != null)
                    {
                        existing.Amount = $"{sportsDrinkL:F1}L";
                    }
                    else
                    {
                        shoppingList.Add(new ShoppingListItem { Item = "Sports Drink", Amount = $"{sportsDrinkL:F1}L" });
                    }
                }
            }

            // Add hydration (separate from carb sources)
            var remainingFluids = plan.TotalFluids;
            
            // Subtract sports drink volume if already added for carbs
            var sportsDrinkItem = shoppingList.FirstOrDefault(s => s.Item.Contains("Sports Drink"));
            if (sportsDrinkItem != null)
            {
                var sportsDrinkAmount = sportsDrinkItem.Amount.Replace("L", "");
                if (double.TryParse(sportsDrinkAmount, out var sportsDrinkVolume))
                {
                    remainingFluids -= sportsDrinkVolume;
                }
            }

            // Add remaining water
            if (remainingFluids > 0)
            {
                shoppingList.Add(new ShoppingListItem { Item = preferences.PreferNaturalFoods ? "Natural Spring Water" : "Water", Amount = $"{remainingFluids:F1}L" });
            }

            // Add supplements
            if (preferences.PreferNaturalFoods)
            {
                shoppingList.Add(new ShoppingListItem { Item = "Raw Honey", Amount = "250g jar" });
                if (preferences.IncludeElectrolytes)
                {
                    shoppingList.Add(new ShoppingListItem { Item = "Sea Salt", Amount = "Small container" });
                }
            }
            else if (preferences.IncludeElectrolytes)
            {
                var tabCount = Math.Max(1, Math.Ceiling(totalHours));
                shoppingList.Add(new ShoppingListItem { Item = "Electrolyte Tablets", Amount = $"{tabCount} tabs" });
            }

            plan.ShoppingList = shoppingList;
        }

        private (string Name, string Instructions) GetCarbSource(NutritionPreferences preferences, int hourMark)
        {
            // Get available sources based on preferences
            var availableSources = new List<(string name, string instructions)>();
            
            if (preferences.PreferNaturalFoods)
            {
                // Natural foods only
                if (preferences.AllowBananas)
                    availableSources.Add(("1 Banana", "Easy to digest and provides quick energy. Eat slowly."));
                
                if (preferences.AllowDates)
                    availableSources.Add(("3-4 Dates", "Natural sugar source. Chew thoroughly and follow with water."));
                
                // Fallback for natural
                if (!availableSources.Any())
                    availableSources.Add(("Honey water", "Mix 2 tbsp honey in 500ml water for natural carbs."));
            }
            else
            {
                // Processed foods allowed - add them first
                if (preferences.AllowGels)
                    availableSources.Add(("Energy Gel", "Take with 150-200ml water. Don't take multiple gels at once."));

                if (preferences.AllowEnergyBars)
                    availableSources.Add(("Energy Bar (half)", "Break into smaller pieces. Chew well and hydrate."));

                // Add natural options if selected
                if (preferences.AllowBananas)
                    availableSources.Add(("1 Banana", "Easy to digest and provides quick energy. Eat slowly."));
                
                if (preferences.AllowDates)
                    availableSources.Add(("3-4 Dates", "Natural sugar source. Chew thoroughly and follow with water."));

                // Sports drink as carb source
                if (preferences.AllowSportsDrinks)
                    availableSources.Add(("Sports Drink (250ml)", "Sip regularly, provides both carbs and fluids."));
            }

            // Fallback if nothing selected
            if (!availableSources.Any())
                availableSources.Add(("Sports Drink", "Provides carbs and electrolytes. Sip regularly."));

            // Rotate through available sources to provide variety
            var sourceIndex = (hourMark - 1) % availableSources.Count;
            return availableSources[sourceIndex];
        }

        private (string Name, string Instructions) GetFluidSource(NutritionPreferences preferences)
        {
            if (preferences.AllowSportsDrinks && preferences.IncludeElectrolytes)
                return ("Sports Drink with Electrolytes", "Sip every 15-20 minutes. Don't wait until thirsty.");
            
            if (preferences.AllowSportsDrinks)
                return ("Sports Drink", "Provides carbs and some sodium. Alternate with plain water.");

            if (preferences.IncludeElectrolytes)
                return ("Water with Electrolyte Tab", "Dissolve tablet completely. Sip regularly.");

            return ("Water", "Plain water. Consider adding a pinch of salt for longer rides.");
        }
    }
}

<style>
.page-container {
    min-height: calc(100vh - 64px);
}

.mud-timeline-item-content {
    padding-left: 16px;
}

.font-weight-bold {
    font-weight: 600 !important;
}

.primary-gradient {
    background: linear-gradient(135deg, #594ae2 0%, #7b68ee 100%) !important;
}

.secondary-gradient {
    background: linear-gradient(135deg, #ff6b6b 0%, #ff8e8e 100%) !important;
}

.success-gradient {
    background: linear-gradient(135deg, #51cf66 0%, #69db7c 100%) !important;
}

.shopping-card {
    border-left: 4px solid #594ae2 !important;
}

.summary-card {
    display: grid;
    justify-content: center;
    color: white;
}

.summary-label .summary-value {
    color: white !important;
}
</style>
