@using Shared.Models
@inject ActivityService ActivityService
@inject ISnackbar Snackbar


<style>
    .kpi-card {
        height: 150px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-content: center;
        align-items: center;
    }
</style>

@if (_loading)
{
    <MudItem xs="12">
        <MudPaper Class="pa-4 d-flex align-center">
            <MudProgressCircular Indeterminate="true" Class="me-2" />
            <MudText Typo="Typo.body2">Loading KPIs…</MudText>
        </MudPaper>
    </MudItem>

}
else
{
    @foreach (var kpi in KPIs)
    {
        <MudItem xs="6" sm="4" md="2">
            <MudCard Class="pa-4 kpi-card" Elevation="3">
                <MudText Typo="Typo.caption" Color="Color.Primary">@kpi.Title</MudText>
                <MudText Typo="Typo.h5" Class="font-weight-bold">@kpi.Value</MudText>
                <MudText Typo="Typo.body2" Color="@kpi.TrendColor" Class="icon-header">
                    <MudIcon Icon="@kpi.TrendIcon" Size="Size.Small" Class="me-1" />
                    @kpi.Trend
                </MudText>
            </MudCard>
        </MudItem>
    }
}


@code {
    private bool _loading = true;
    private DateTime _lastRefresh = DateTime.Now;

    public List<KPIModel> KPIs = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadActivities();
    }

    private async Task LoadActivities()
    {
        _loading = true;
        try
        {
            var kpi = await ActivityService.GetKpiDataAsync();

            if (kpi?.IsSuccess == true && kpi.Data is not null)
            {
                var d = kpi.Data;

                KPIs = new()
                {
                    new KPIModel("Activities", d.ActivityCount, d.ActivityTrend,
                        d.ActivityTrendUp ? Icons.Material.Filled.ArrowUpward : Icons.Material.Filled.ArrowDownward,
                        d.ActivityTrendUp ? Color.Success : Color.Error),

                    new KPIModel("Distance", d.TotalDistance, d.DistanceTrend,
                        d.DistanceTrendUp ? Icons.Material.Filled.ArrowUpward : Icons.Material.Filled.ArrowDownward,
                        d.DistanceTrendUp ? Color.Success : Color.Error),

                    new KPIModel("Time", d.TotalTime, d.TimeTrend,
                        d.TimeTrendUp ? Icons.Material.Filled.ArrowUpward : Icons.Material.Filled.ArrowDownward,
                        d.TimeTrendUp ? Color.Success : Color.Error),

                    new KPIModel("Elevation", d.TotalElevation, d.ElevationTrend,
                        d.ElevationTrendUp ? Icons.Material.Filled.ArrowUpward : Icons.Material.Filled.ArrowDownward,
                        d.ElevationTrendUp ? Color.Success : Color.Error),
                };

                _lastRefresh = DateTime.Now;
            }
            else
            {
                Snackbar.Add(kpi?.Message ?? "KPI-Daten konnten nicht geladen werden.", Severity.Error);
                KPIs = BuildFallback();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Laden der KPI-Daten: {ex.Message}", Severity.Error);
            KPIs = BuildFallback();
        }
        finally
        {
            _loading = false;
        }
    }

    private static List<KPIModel> BuildFallback() => new()
    {
        new KPIModel("Activities", "0", "0%", Icons.Material.Filled.HorizontalRule, Color.Default),
        new KPIModel("Distance", "0km", "0%", Icons.Material.Filled.HorizontalRule, Color.Default),
        new KPIModel("Time", "0h", "0%", Icons.Material.Filled.HorizontalRule, Color.Default),
        new KPIModel("Elevation", "0m", "0%", Icons.Material.Filled.HorizontalRule, Color.Default),
    };

    public class KPIModel
    {
        public string Title { get; }
        public string Value { get; }
        public string Trend { get; }
        public string TrendIcon { get; }
        public Color TrendColor { get; }

        public KPIModel(string title, string value, string trend, string trendIcon, Color trendColor)
        {
            Title = title;
            Value = value;
            Trend = trend;
            TrendIcon = trendIcon;
            TrendColor = trendColor;
        }
    }
}