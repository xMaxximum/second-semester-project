@using Shared.Models

@inject HttpClient Http

@if (isLoading)
{
    <MudPaper Elevation="3" Style="padding: 24px; height: auto;">
        <MudText>Loading weather data...</MudText>
    </MudPaper>
}
else if (data is null)
{
    <MudPaper Elevation="3" Style="padding: 24px; height: auto;">
        <MudText Color="Color.Error">Failed to load weather data.</MudText>
    </MudPaper>
}
else
{
    <MudPaper Elevation="3" Style="padding: 24px; height: auto;">
        <MudStack Row="true">
            <!-- Left Column -->
            <MudItem xs="12" md="6"
                     Style="
                    display: flex; 
                    justify-content: center; 
                    align-items: center; 
                    border-right: 1px solid rgba(0, 0, 0, 0.12);
                    padding-right: 16px;">
                <MudStack Spacing="2" Style="align-items: center; justify-content: center; text-align: center;">
                    <MudText Typo="Typo.subtitle1" Color="Color.Dark">
                        Current Weather for <br/>
                        @data.City, @data.CountryCode
                    </MudText>
                    <MudText Typo="Typo.caption" Color="Color.Dark">@data.Datetime</MudText>

                    <MudStack Style="align-items: center; justify-content: center;" Row="true" Spacing="3">
                        <MudIcon Icon="@GetIcon(data.Condition)" Size="Size.Large" Color="Color.Primary"/>
                        <MudStack Spacing="0" Style="align-items: flex-start;">
                            <MudText Typo="Typo.h4">@data.Temperature°C</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Dark">@data.Description @data.WindDirection</MudText>
                        </MudStack>
                    </MudStack>
                </MudStack>
            </MudItem>

            <!-- Right Column -->
            <MudItem xs="12" md="6" Style="padding-left: 16px; padding-right: 16px;">
                <MudStack Spacing="2" Style="width: 100%;">
                    <MudGrid Style="display: flex; align-items: center">
                        <MudItem xs="6">
                            <MudText Color="Color.Dark">Feels Like:</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Align="Align.Right">@data.FeelsLike°C</MudText>
                        </MudItem>
                    </MudGrid>

                    <MudGrid Style="display: flex; align-items: center">
                        <MudItem xs="6">
                            <MudStack Row="true" Spacing="1">
                                <MudIcon Icon="@Icons.Material.Filled.InvertColors" Size="Size.Small" Color="Color.Info"/>
                                <MudText Color="Color.Dark">Humidity:</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Align="Align.Right">@data.Humidity%</MudText>
                        </MudItem>
                    </MudGrid>

                    <MudGrid Style="display: flex; align-items: center">
                        <MudItem xs="6">
                            <MudStack Row="true" Spacing="1">
                                <MudIcon Icon="@Icons.Material.Filled.Visibility" Size="Size.Small" Color="Color.Default"/>
                                <MudText Color="Color.Dark">Cloud Coverage:</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Align="Align.Right">@data.CloudCoverage%</MudText>
                        </MudItem>
                    </MudGrid>

                    <MudGrid Style="display: flex; align-items: center">
                        <MudItem xs="6">
                            <MudStack Row="true" Spacing="1">
                                <MudIcon Icon="@Icons.Material.Filled.Air" Size="Size.Small" Color="Color.Success"/>
                                <MudText Color="Color.Dark">Wind Speed:</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Align="Align.Right">@data.WindSpeed m/s</MudText>
                        </MudItem>
                    </MudGrid>
                </MudStack>
            </MudItem>
        </MudStack>
    </MudPaper>
}

@code {
    private WeatherData? data;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var geo = await Http.GetFromJsonAsync<GeoLocation>("http://ip-api.com/json/");

            if (geo != null)
            {
                var response = await Http.PostAsJsonAsync("api/weather", new LocationRequest
                {
                    Lat = geo.Lat,
                    Lon = geo.Lon,
                    City = geo.City
                });

                if (response.IsSuccessStatusCode)
                {
                    data = await response.Content.ReadFromJsonAsync<WeatherData>();
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to fetch weather data: {ex.Message}");
            data = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetIcon(WeatherCondition condition) => condition switch
    {
        WeatherCondition.Sunny => Icons.Material.Filled.WbSunny,
        WeatherCondition.Cloudy => Icons.Material.Filled.Cloud,
        WeatherCondition.Rainy => Icons.Material.Filled.CloudQueue,
        WeatherCondition.PartlyCloudy => Icons.Material.Filled.Cloud,
        _ => Icons.Material.Filled.Cloud
    };

    public class GeoLocation
    {
        public double Lat { get; set; }
        public double Lon { get; set; }
        public string City { get; set; } = string.Empty;
    }
    
}
