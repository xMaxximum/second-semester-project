@using Shared.Models
@inject WeatherService WeatherService
@inject WeatherLocationService LocationService

@if (!_locationProvided)
{
    <WeatherLocationForm IsLoading="@_isLoading"
                         ErrorMessage="@_errorMessage"
                         HasSavedLocation="@_hasSavedLocation"
                         SavedLocationDisplay="@_savedLocationDisplay"
                         OnLocationSelected="HandleLocationSelected"
                         OnUseSavedLocation="LoadSavedLocation"
                         @ref="@_locationFormRef" />
}
else
{
    <WeatherDisplay WeatherData="_data"
                    IsLoading="_isLoading"
                    OnReset="ResetLocation" />
}

<script>
    window.blazorGeolocation = {
        getCurrentPosition: function () {
            return new Promise((resolve, reject) => {
                console.log('Geolocation request started...');

                if (!navigator.geolocation) {
                    console.error('Geolocation not supported');
                    reject('Geolocation is not supported by this browser.');
                    return;
                }

                const options = {
                    enableHighAccuracy: true,
                    timeout: 15000,
                    maximumAge: 60000 // 1 minute
                };

                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        console.log('Position received:', position);
                        const lat = position.coords.latitude;
                        const lng = position.coords.longitude;
                        const accuracy = position.coords.accuracy;

                        console.log(`Coordinates: ${lat}, ${lng} (accuracy: ${accuracy}m)`);

                        const result = {
                            latitude: lat,
                            longitude: lng,
                            accuracy: accuracy
                        };

                        resolve(JSON.stringify(result));
                    },
                    (error) => {
                        console.error('Geolocation error:', error);
                        let errorMessage = '';
                        switch (error.code) {
                            case 1: // PERMISSION_DENIED
                                errorMessage = 'Location access denied by user. Please enable location permissions and try again.';
                                break;
                            case 2: // POSITION_UNAVAILABLE
                                errorMessage = 'Location information is unavailable. Please check your internet connection.';
                                break;
                            case 3: // TIMEOUT
                                errorMessage = 'Location request timed out. Please try again.';
                                break;
                            default:
                                errorMessage = 'An unknown error occurred while getting location.';
                                break;
                        }
                        reject(errorMessage);
                    },
                    options
                );
            });
        }
    };
</script>

@code {
    private WeatherData? _data;
    private bool _isLoading = false;
    private bool _locationProvided = false;
    private string _errorMessage = string.Empty;

    // Saved location properties
    private bool _hasSavedLocation = false;
    private string _savedLocationDisplay = string.Empty;
    private LocationRequest? _savedLocation;
    private bool _loadedFromSaved = false;

    // Component reference
    private WeatherLocationForm? _locationFormRef;

    protected override async Task OnInitializedAsync()
    {
        await LoadLocationFromCookie();

        if (_hasSavedLocation && !_loadedFromSaved)
        {
            _loadedFromSaved = true;
            await LoadSavedLocation();
        }
    }

    private async Task LoadLocationFromCookie()
    {
        try
        {
            _savedLocation = await LocationService.GetSavedLocationAsync();
            
            if (_savedLocation != null)
            {
                _hasSavedLocation = true;
                _savedLocationDisplay = LocationService.GetLocationDisplayText(_savedLocation);
                Console.WriteLine($"Loaded saved location: {_savedLocationDisplay}");
            }
            else
            {
                _hasSavedLocation = false;
                _savedLocationDisplay = string.Empty;
                Console.WriteLine("No saved location found");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading saved location: {ex.Message}");
            _hasSavedLocation = false;
            _savedLocationDisplay = string.Empty;
        }
        
        StateHasChanged();
    }

    private async Task LoadSavedLocation()
    {
        if (_savedLocation == null) return;

        _isLoading = true;
        _errorMessage = string.Empty; // Clear any existing error messages
        StateHasChanged();

        try
        {
            var weatherData = await WeatherService.GetWeatherAsync(_savedLocation);
            
            if (weatherData != null)
            {
                _data = weatherData;
                _locationProvided = true;
                
                // If saved location doesn't have city info but weather data does, update it
                if (string.IsNullOrWhiteSpace(_savedLocation.City) && !string.IsNullOrWhiteSpace(weatherData.City))
                {
                    var enhancedLocationRequest = LocationService.EnhanceLocationWithWeatherData(_savedLocation, weatherData);
                    
                    await LocationService.SaveLocationAsync(enhancedLocationRequest);
                    _savedLocation = enhancedLocationRequest;
                    _savedLocationDisplay = LocationService.GetLocationDisplayText(enhancedLocationRequest);
                    
                    Console.WriteLine($"Enhanced saved location display: {_savedLocationDisplay}");
                }
            }
            else
            {
                _errorMessage = "Could not load weather data for saved location. Please try a different location.";
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to fetch weather data: {ex.Message}");
            _errorMessage = "An error occurred while fetching weather data. Please try again.";
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleLocationSelected(LocationRequest locationRequest)
    {
        _isLoading = true;
        _errorMessage = string.Empty; // Clear any existing error messages
        StateHasChanged();

        try
        {
            var weatherData = await WeatherService.GetWeatherAsync(locationRequest);
            
            if (weatherData != null)
            {
                _data = weatherData;
                _locationProvided = true;
                
                // Enhance location request with city information from weather response
                var enhancedLocationRequest = LocationService.EnhanceLocationWithWeatherData(locationRequest, weatherData);
                
                await LocationService.SaveLocationAsync(enhancedLocationRequest);
                
                // Update saved location display for future use
                _savedLocation = enhancedLocationRequest;
                _hasSavedLocation = true;
                _savedLocationDisplay = LocationService.GetLocationDisplayText(enhancedLocationRequest);
                
                Console.WriteLine($"Updated saved location display: {_savedLocationDisplay}");
            }
            else
            {
                _errorMessage = "Could not get weather data for the specified location. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to fetch weather data: {ex.Message}");
            _errorMessage = "An error occurred while fetching weather data. Please try again.";
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void ResetLocation()
    {
        _locationProvided = false;
        _data = null;
        _errorMessage = string.Empty;
        _locationFormRef?.Reset();
        StateHasChanged();
    }
}