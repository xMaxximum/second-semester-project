@using Shared.Models

@inject HttpClient Http
<style>
    .centered-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
    }

    .responsive-divider {
        background-color: rgba(0, 0, 0, 0.12);
        width: 100%;
        height: 0.0625rem;
    }

    .divider-container {
        display: block;
        width: 100%;
        padding: 0.5rem 0;
    }

    .left-pane,
    .right-pane {
        padding: 0.5rem 0;
        border: none;
    }

    @@media (min-width: 60rem) {
    .responsive-grid {
        display: flex;
        flex-wrap: nowrap;
        margin-top: auto;
    }

    .left-pane {
        border-right: 0.0625rem solid rgba(0, 0, 0, 0.12);
        padding-right: 0;
        flex: 1;
    }

    .right-pane {
        padding-left: 0;
        flex: 1;
    }

    .divider-container {
        display: none;
    }
    }
</style>

@if (isLoading)
{
    <MudPaper Elevation="3" Style="padding: 1.5rem; height: auto;">
        <MudText>Loading weather data...</MudText>
    </MudPaper>
}
else if (data is null)
{
    <MudPaper Elevation="3" Style="padding: 1.5rem; height: auto;">
        <MudText Color="Color.Error">Failed to load weather data.</MudText>
    </MudPaper>
}
else
{
    <MudPaper Elevation="3" Style="padding: 1.5rem;">
        <MudGrid Class="responsive-grid">
            <!-- Left Column -->
            <MudItem xs="12" md="6" Class="left-pane">
                <MudStack Spacing="2" Class="centered-content">
                    <MudText Typo="Typo.subtitle1" Color="Color.Dark" Align="Align.Center">
                        Current Weather for <br />
                        @data.City, @data.CountryCode
                    </MudText>
                    <MudText Typo="Typo.caption" Color="Color.Dark">@data.Datetime</MudText>

                    <MudStack Row="true" Spacing="3" Class="centered-content">
                        <MudIcon Icon="@GetIcon(data.Condition)" Size="Size.Large" Color="Color.Primary" />
                        <MudStack Spacing="0" Style="align-items: flex-start;">
                            <MudText Typo="Typo.h4">@data.Temperature°C</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Dark">@data.Description @data.WindDirection</MudText>
                        </MudStack>
                    </MudStack>
                </MudStack>
            </MudItem>

            <!-- Responsive Divider - only shows on mobile -->
            <MudItem xs="12" Class="divider-container">
                <div class="responsive-divider"></div>
            </MudItem>

            <!-- Right Column -->
            <MudItem xs="12" md="6" Class="right-pane">
                <MudStack Spacing="2">
                    <MudGrid>
                        <MudItem xs="6">
                            <MudText Color="Color.Dark">Feels Like:</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Align="Align.Right">@data.FeelsLike°C</MudText>
                        </MudItem>
                    </MudGrid>

                    <MudGrid>
                        <MudItem xs="6">
                            <MudStack Row="true" Spacing="1">
                                <MudIcon Icon="@Icons.Material.Filled.InvertColors" Size="Size.Small" Color="Color.Info" />
                                <MudText Color="Color.Dark">Humidity:</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Align="Align.Right">@data.Humidity%</MudText>
                        </MudItem>
                    </MudGrid>

                    <MudGrid>
                        <MudItem xs="6">
                            <MudStack Row="true" Spacing="1">
                                <MudIcon Icon="@Icons.Material.Filled.Visibility" Size="Size.Small" Color="Color.Default" />
                                <MudText Color="Color.Dark">Cloud Coverage:</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Align="Align.Right">@data.CloudCoverage%</MudText>
                        </MudItem>
                    </MudGrid>

                    <MudGrid>
                        <MudItem xs="6">
                            <MudStack Row="true" Spacing="1">
                                <MudIcon Icon="@Icons.Material.Filled.Air" Size="Size.Small" Color="Color.Success" />
                                <MudText Color="Color.Dark">Wind Speed:</MudText>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Align="Align.Right">@data.WindSpeed m/s</MudText>
                        </MudItem>
                    </MudGrid>
                </MudStack>
            </MudItem>
        </MudGrid>
    </MudPaper>
}

@code {
    private WeatherData? data;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var geo = await Http.GetFromJsonAsync<LocationRequest>("https://ipapi.co/json/");

            if (geo != null)
            {
                var response = await Http.PostAsJsonAsync("api/weather", new LocationRequest
                {
                    Latitude = geo.Latitude,
                    Longitude = geo.Longitude,
                    City = geo.City
                });

                if (response.IsSuccessStatusCode)
                {
                    data = await response.Content.ReadFromJsonAsync<WeatherData>();
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to fetch weather data: {ex.Message}");
            data = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetIcon(WeatherCondition condition) => condition switch
    {
        WeatherCondition.Sunny => Icons.Material.Filled.WbSunny,
        WeatherCondition.Cloudy => Icons.Material.Filled.Cloud,
        WeatherCondition.Rainy => Icons.Material.Filled.CloudQueue,
        WeatherCondition.PartlyCloudy => Icons.Material.Filled.Cloud,
        _ => Icons.Material.Filled.Cloud
    };
}