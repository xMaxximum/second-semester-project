#include "FS.h"
#include "SD.h"
#include "SPI.h"

#define CUSTOM_MOSI 16
#define CUSTOM_MISO 4
#define CUSTOM_SCK 15
#define CUSTOM_CS 2
#define RAM_ARR 24000 // 2000 sensorData packets (2000 * 12 count of sensor values is 24000)
// 24000 * 4 bytes for a float is 96kB of RAM

void setup()
{
  Serial.begin(115200);
  delay(2000);
  SPI.begin(CUSTOM_SCK, CUSTOM_MISO, CUSTOM_MOSI, CUSTOM_CS);

  if (!SD.begin())
  {
    Serial.println("Card Mount Failed");
    return;
  }

  uint64_t cardSize = SD.cardSize() / (1024 * 1024);
  Serial.printf("SD Card Size: %lluMB\n", cardSize);
  Serial.printf("Total space: %lluMB\n", SD.totalBytes() / (1024 * 1024));
  Serial.printf("Used space: %lluMB\n", SD.usedBytes() / (1024 * 1024));
}

uint timeBeforeWrite, timeAfterWrite;
File file;
void loop()
{
  if (false)
  {
    Serial.print("heap before sensorData: ");
    Serial.println(esp_get_free_heap_size());
    // allocate the needed ram for the sensor data
    float *sensorData = (float *)malloc(RAM_ARR * sizeof(float));
    Serial.print("heap after sensorData: ");
    Serial.println(esp_get_free_heap_size());

    // this data is generated by sensors every 200ms instead
    for (int i = 0; i < RAM_ARR; i++)
      sensorData[i] = i;

    // open the file where the array data is streamed into
    file = SD.open("/sensorData.bin", FILE_WRITE);
    if (!file)
    {
      Serial.println("Error opening file");
      return;
    }

    timeBeforeWrite = millis();
    // write the array to the file
    file.write((uint8_t *)sensorData, RAM_ARR * sizeof(float));
    timeAfterWrite = millis();
    Serial.print("Writetime: ");
    Serial.println(timeAfterWrite - timeBeforeWrite);
    file.close();

    // the space of the array can now be used again
    free(sensorData);

    Serial.println("Writing data is finished.\n");
    delay(5000);
  }

  // TEST: read the file from sdcard into a different array for testing
  if (false)
  {
    // Open the file
    file = SD.open("/sensorData.bin", FILE_READ);
    if (!file)
    {
      Serial.println("Error opening file");
      return;
    }
    // allocate the needed ram for the sensor data
    float *sensorDataRead = (float *)malloc(RAM_ARR * sizeof(float));
    // sensorDataRead contains the actual data of the sdcard now
    file.read((uint8_t *)sensorDataRead, RAM_ARR * sizeof(float));
    file.close();

    Serial.println("This is the file content:");
    for (int i = 0; i < 100; i++)
    {
      Serial.println(sensorDataRead[i]);
    }
    free(sensorDataRead);
  }
}
